const fs = require('fs');
const path = require('path');

const esbuild = require('esbuild');
const { polyfillNode } = require('@lit-protocol/esbuild-plugin-polyfill-node');
const Hash = require('ipfs-only-hash');

function aliasFetch() {
  const shim = path.resolve(__dirname, 'deno-fetch-shim.js');

  return {
    name: 'alias-fetch',
    setup(build) {
      build.onResolve({ filter: /^node-fetch$/ }, () => ({ path: shim }));
      build.onResolve({ filter: /^cross-fetch(\/.*)?$/ }, () => ({ path: shim }));
    },
  };
}

const ensureDirectoryExistence = (filePath) => {
  const dirname = path.dirname(filePath);
  if (!fs.existsSync(dirname)) {
    fs.mkdirSync(dirname, { recursive: true });
  }
};

function getBundledVincentAbilityCode() {
  return `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
 */

import { asBundledVincentAbility } from '@lit-protocol/vincent-ability-sdk';
import { settlementOptimizerAbility } from '../lib/vincent-ability';
import metadata from './vincent-ability-metadata.json';

if(!metadata.ipfsCid) {
  throw new Error('ipfsCid is not defined in metadata JSON file');
}

export const bundledVincentAbility = asBundledVincentAbility(settlementOptimizerAbility, metadata.ipfsCid);
`;
}

function litActionModuleCode({ ipfsCid, content }) {
  return `/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD.
 * @type {string}
 */
const code = ${JSON.stringify(content)};
module.exports = {
  "code": code,
  "ipfsCid": "${ipfsCid}",
};
`;
}

function metadataJsonFile({ ipfsCid }) {
  return `{
  "ipfsCid": "${ipfsCid}"
}
`;
}

const createBundledAbilityFile = {
  name: 'create-vincent-bundled-ability-file',
  setup(build) {
    build.initialOptions.write = false;

    const sourceDir = path.dirname(build.initialOptions.entryPoints[0]);

    console.log(sourceDir);
    build.onEnd(async (result) => {
      if (result.errors.length > 0) {
        console.error('Build failed with errors:', result.errors);
        return;
      }

      const outputFile = result.outputFiles[0];
      const content = outputFile.text;
      const ipfsCid = await Hash.of(content);

      // Write bundledAbility wrapper
      const bundledSource = getBundledVincentAbilityCode();
      const bundledPath = path.join(sourceDir, '../generated/vincent-bundled-ability.ts');
      fs.writeFileSync(bundledPath, bundledSource);

      // Write metadata JSON
      const outputPath = path.dirname(path.resolve(outputFile.path));
      const metadataPath = path.join(outputPath, 'vincent-ability-metadata.json');
      const metadataContent = metadataJsonFile({ ipfsCid });
      fs.writeFileSync(metadataPath, metadataContent);
    });
  },
};

const wrapIIFEInStringPlugin = {
  name: 'wrap-iife-in-string',
  setup(build) {
    build.initialOptions.write = false;

    build.onEnd(async (result) => {
      if (result.errors.length > 0) {
        console.error('Build failed with errors:', result.errors);
        return;
      }

      const outputFile = result.outputFiles[0];
      const content = outputFile.text;
      const ipfsCid = await Hash.of(content);

      const wrapped = litActionModuleCode({ content, ipfsCid });
      const outputPath = path.resolve(outputFile.path);
      ensureDirectoryExistence(outputPath);
      fs.writeFileSync(outputPath, wrapped);
    });
  },
};

(async () => {
  try {
    await esbuild
      .build({
        tsconfig: './tsconfig.lib.json',
        entryPoints: ['./src/lib/lit-action.ts'],
        bundle: true,
        minify: false,
        sourcemap: false,
        treeShaking: true,
        metafile: true,
        outdir: './src/generated/',
        plugins: [
          aliasFetch(),
          polyfillNode({
            globals: {
              Buffer: true,
              process: true,
            },
            modules: {
              crypto: true,
              http: true,
              https: true,
              stream: true,
              zlib: true,
              url: true,
              util: true,
            },
          }),
          wrapIIFEInStringPlugin,
          createBundledAbilityFile,
        ],
        platform: 'browser',
        write: false,
      })
      .then((result) => {
        result.outputFiles.forEach((file) => {
          const bytes = file.text.length;
          const mbInBinary = (bytes / (1024 * 1024)).toFixed(4);
          const mbInDecimal = (bytes / 1_000_000).toFixed(4);

          console.log(
            `✅ ${file.path.split('/').pop()}\n- ${mbInDecimal} MB (in decimal)\n- ${mbInBinary} MB (in binary)`,
          );
        });
      });

    console.log('✅ Vincent ability built successfully');
  } catch (e) {
    console.error('❌ Error building Vincent ability: ', e);
    process.exit(1);
  }
})();
